the linear regression model is pretty simple:
you have a model, that takes in given inputs, and alters them by multiplying some weights and adding some biases

this generates predictions, but usually they are way off in the beginning. However, you can apply gradient descent, which reduces the MSE loss

then, you can make a prediction with any other input, based on the trained regression model, and it will probably make a good prediction

so far logistic regression
kinda like linear regression - you have inputs which are supposed to be a vector, but for images it is kinda hard, so you need to "flatten" it, or basically multiply the 
dimensions together. So you should have the batches and the flattened out 2d image

you can then create a model based on that, but it needs to be flattened out, so you have to do it manually

you create a class, that inherits from nn.Module

you have your constructor, which has a linear variable, that is the linear model

then you can overwrite the forward function of the model, which you can change the shape of the tensor

this allows for the model to make predictions, based on the inputs, which are a flattened out vector

So far, the linear regression model and the logistic regression model are pretty similar

When the outputs are probabilities of an item being a certain number, then the logistic regression model becomes a classification model


The neural network that I trained has an input layer - some intermediate layers where a relu function is called with the items passed in, which removes all of the negative numbers,
which removes the linearity of the model. You are optimizing specific weights and biases for each Linear layer. When the input is passed in, the output for a hidden layer is an item like 32 or 64, and then the item is added to the output layer where the predictions are generated. The relu allows for the model to learn faster and perform better. 


Input (image, 784 pixels) -> transforms the data into the outputs -> Hidden Layer 1 (input size of 32, output size of 10)
